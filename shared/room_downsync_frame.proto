syntax = "proto3";

package shared;

// Providing "csharp_namespace" to force generating lowercase namespace, reference https://protobuf.dev/programming-guides/proto3/#packages 
option csharp_namespace = "shared";

enum BulletState {
	StartUp = 0;
	Active = 1;
	Exploding = 2;
}

enum CharacterState {
	Idle1 = 0;
	Walking = 1;

	Atk1 = 2;
	Atked1 = 3;

	InAirIdle1NoJump = 4;

	InAirIdle1ByJump = 5;

	InAirAtk1 = 6;
	InAirAtked1 = 7;
	BlownUp1 = 8;
	LayDown1 = 9;
	GetUp1 = 10;

	Atk2 = 11;
	Atk3 = 12;
	Atk4 = 13;
	Atk5 = 14;

	Dashing = 15;

	OnWall = 16;

	TurnAround = 17;

	Dying = 18;
}
 
message PlayerDownsync {
	int32 id = 1;
	int32 virtualGridX = 2;
	int32 virtualGridY = 3;
	int32 dirX = 4;
	int32 dirY = 5;   
	int32 velX = 6;
	int32 velY = 7; // "velX" and "velY" is used to record the accumulated effect by inertia and accelerations (including gravity)
	int32 speed = 8; // this is the instantaneous scalar attribute of a character, different from but will be accounted in "velX" and "velY"
	int32 speciesId = 9; // For evolution during battle
	int32 joinIndex = 10;
	int32 colliderRadius = 11;
	bool removed = 12;
	int32 score = 13;
	int32 lastMoveGmtMillis = 14;
	int32 framesToRecover = 15;
	int32 hp = 16;
	int32 maxHp = 17;
	CharacterState characterState = 18;
	int32 framesInChState = 19; // number of frames elapsed in the current character state   
	bool inAir = 20; // by design a standalone field only inferred by the collision result of "applyInputFrameDownsyncDynamicsOnSingleRenderFrame" instead of "characterState", because we need check the transition for "characterState" from this field, i.e. "inAir (prev -> curr)"  
	int32 activeSkillId = 21;
	int32 activeSkillHit = 22;
	int32 framesInvinsible = 23;

	int32 bulletTeamId = 24;
	int32 chCollisionTeamId = 25;

	bool onWall = 26; // like "inAir", it’s by design a standalone field only inferred by the collision result of "applyInputFrameDownsyncDynamicsOnSingleRenderFrame" instead of "characterState", because we need check the transition for "characterState" from this field, i.e. "onWall (prev -> curr)"
	int32 onWallNormX = 27;
	int32 onWallNormY = 28;

	bool capturedByInertia = 29; // like "inAir", it’s by design a standalone field only inferred by the calc result of "applyInputFrameDownsyncDynamicsOnSingleRenderFrame" instead of "characterState"
	int32 revivalVirtualGridX = 30;
	int32 revivalVirtualGridY = 31;

	string name = 997;
	string displayName = 998;
	string avatar = 999;
}

message InputFrameDecoded {
	int32 dx = 1;
	int32 dy = 2;
	int32 btnALevel = 3;
	int32 btnBLevel = 4;
}

message InputFrameUpsync {
	int32 inputFrameId = 1;
	uint64 encoded = 2;
	int32 joinIndex = 3;
}

message InputFrameDownsync {
	int32 inputFrameId = 1;
	repeated uint64 inputList = 2; // Indexed by "joinIndex", we try to compress the "single player input" into 1 word (64-bit for 64-bit Golang runtime) because atomic compare-and-swap only works on 1 word. Although CAS on custom struct is possible in C# https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=netstandard-2.1, using a single word is still faster whenever possible. 
	uint64 confirmedList = 3; // Indexed by "joinIndex", same compression concern as above
}

message WsReq {
	int32 playerId = 1;
	int32 act = 2;
	int32 joinIndex = 3;
	int32 ackingFrameId = 4;
	int32 ackingInputFrameId = 5;
	int32 authKey = 6;
	repeated InputFrameUpsync inputFrameUpsyncBatch = 7;
}

message InputBufferSnapshot {
	int32 refRenderFrameId = 1;
	uint64 unconfirmedMask = 2;
	repeated InputFrameDownsync toSendInputFrameDownsyncs = 3;
	bool shouldForceResync = 4;
	int32 peerJoinIndex = 5;
}

enum BulletType {
	Undetermined = 0;
	Melee = 1;
	Fireball = 2;
}

enum SkillTriggerType {
	RisingEdge = 0;
	FallingEdge = 1;
}

message BulletConfig {
	int32 startupFrames = 1;
	int32 cancellableStFrame = 2;
	int32 cancellableEdFrame = 3;
	int32 activeFrames = 4;

	int32 hitStunFrames = 5;
	int32 blockStunFrames = 6;
	int32 pushbackVelX = 7;
	int32 pushbackVelY = 8;
	int32 damage = 9;

	int32 selfLockVelX = 10;
	int32 selfLockVelY = 11;

	int32 hitboxOffsetX = 12;
	int32 hitboxOffsetY = 13;
	int32 hitboxSizeX = 14;
	int32 hitboxSizeY = 15;

	bool blowUp = 16;

	int32 speciesId = 17; // For fireball, this SpeciesId specifies both the active animation and the explosion animation, for melee it specifies the explosion animation
	int32 explosionFrames = 18;

	BulletType bType = 19;

	int32 speed = 20; // For speed varying bullets, this is the initial speed

	map<int32, int32> cancelTransit = 21; // patternId -> skillId
}

message BulletBattleAttr {
	int32 bulletLocalId = 1;
	int32 originatedRenderFrameId = 2; // Copied from the first bullet for all subsequent bullets
	int32 offenderJoinIndex = 3; // Copied to favor collision handling of the dispatched bullet
	int32 teamId = 4;
}

message Bullet {
	// Jargon reference https://www.thegamer.com/fighting-games-frame-data-explained/
	// ALL lengths are in world coordinate
	BulletState blState = 1;
	int32 framesInBlState = 2;
	BulletBattleAttr battleAttr = 3;
	BulletConfig config = 4;

	int32 virtualGridX = 999;
	int32 virtualGridY = 1000;
	int32 dirX = 1001;
	int32 dirY = 1002;
	int32 velX = 1003;
	int32 velY = 1004;
}

message HolePunchUpsync {
	string intAuthToken = 1;
	int32 boundRoomId = 2;
	int32 authKey = 3;
}

message PeerUdpAddr {
	string ip = 1;
	int32 port = 2;
	int32 authKey = 3;
}

message BattleColliderInfo {
	string stageName = 1;

	int32 boundRoomId = 2;
	int64 battleDurationFrames = 3;
	int32 inputFrameUpsyncDelayTolerance = 4;
	int32 maxChasingRenderFramesPerUpdate = 5;
	double rollbackEstimatedDtMillis = 6;
	int64 rollbackEstimatedDtNanos = 7;

	int32 renderBufferSize = 8;
	int32 collisionMinStep = 9;
	int32 boundRoomCapacity = 10;
	PeerUdpAddr battleUdpTunnel = 11;

	bool frameDataLoggingEnabled = 1024;
}

message RoomDownsyncFrame {
	int32 id = 1;
	repeated PlayerDownsync playersArr = 2;
	int64 countdownNanos = 3;
	repeated Bullet bullets = 4;  

	uint64 backendUnconfirmedMask = 1024; // Indexed by "joinIndex", same compression concern as stated in InputFrameDownsync
	bool shouldForceResync = 1025;
	repeated int32 speciesIdList = 1026;

	int32 bulletLocalIdCounter = 1027;
	repeated PeerUdpAddr peerUdpAddrList = 1028;
}

message WsResp {
	int32 ret = 1;
	int32 act = 2;
	RoomDownsyncFrame rdf = 3;
	repeated InputFrameDownsync inputFrameDownsyncBatch = 4;
	BattleColliderInfo bciFrame = 5;
	int32 peerJoinIndex = 6;
}

message Skill {
	int32 battleLocalId = 1;
	int32 recoveryFrames = 2;
	int32 recoveryFramesOnBlock = 3; 
	int32 recoveryFramesOnHit = 4; 
	SkillTriggerType triggerType = 5;
	CharacterState boundChState = 6;        
	
	/**
	[WARN] Multihit of a fireball is more difficult to handle than that of melee, because we have to count from the fireball's first hit; the situation becomes even more complicated when a multihit fireball is in a crowd -- remains to be designed

	Types of fireball multihit-singlebullet
	a. References the emission frame
	b. References the first hit only when actually hit
	c. References the first hit even if blocked
	d. References the prev hit only when actually hit
	e. References the prev hit even if blocked
	*/
	repeated BulletConfig hits = 7; // Hits within a "Skill" are automatically triggered
}
